generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    Int                   @id @default(autoincrement())
  username              String                @unique
  email                 String                @unique
  password              String
  fullname              String
  phone                 String?
  roleId                Int
  volunteerDetailId     Int?                  @unique
  organizationDetailId  Int?                  @unique
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  registrations         Activity[]            @relation("UserRegistrations")
  reports               Report[]              @relation("UserReports")
  events                Event[]               @relation("OrganizerEvents")
  volunteerDetail       VolunteerDetail?      @relation("UserVolunteerDetail")
  organizationDetail    OrganizationDetail?   @relation("UserOrganizationDetail")
  role                  Role                  @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique

  users User[]

  @@map("roles")
}

model Province {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique
  regencies            Regency[]             
  volunteerDetails     VolunteerDetail[]     
  organizationDetails  OrganizationDetail[]  

  @@map("provinces")
}

model Regency {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique
  provinceId           Int
  province             Province              @relation(fields: [provinceId], references: [id])
  volunteerDetails     VolunteerDetail[]     
  organizationDetails  OrganizationDetail[]  

  @@map("regencies")
}

model VolunteerDetail {
  id           Int       @id @default(autoincrement())
  userId       Int       @unique
  skills       String
  education    String
  otherDetails String?   @db.Text
  address      String?
  provinceId   Int?
  regencyId    Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User      @relation("UserVolunteerDetail", fields: [userId], references: [id])
  province     Province? @relation(fields: [provinceId], references: [id])
  regency      Regency?  @relation(fields: [regencyId], references: [id])

  @@map("volunteer_details")
}

model OrganizationDetail {
  id           Int                   @id @default(autoincrement())
  userId       Int                   @unique
  name         String
  address      String?
  provinceId   Int?
  regencyId    Int?
  description  String                @db.Text
  typeId       Int
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  user         User                  @relation("UserOrganizationDetail", fields: [userId], references: [id])
  province     Province?             @relation(fields: [provinceId], references: [id])
  regency      Regency?              @relation(fields: [regencyId], references: [id])
  category     CategoryOrganization   @relation(fields: [typeId], references: [id])

  @@map("organization_details")
}

model CategoryOrganization {
  id            Int                   @id @default(autoincrement())
  name          String                @unique
  description   String?               @db.Text
  organizations OrganizationDetail[]

  @@map("category_organizations")
}

model Event {
  id              Int          @id @default(autoincrement())
  organizerId     Int
  title           String
  description     String       @db.Text
  additionalInfo  String?      @db.Text
  date            DateTime
  location        String
  slotsNeeded     Int
  slotsAvailable  Int
  categoryId      Int?
  status          StatusEvent
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  organizer       User         @relation("OrganizerEvents", fields: [organizerId], references: [id])
  category        CategoryEvent? @relation(fields: [categoryId], references: [id])
  registrations   Activity[]   @relation("EventRegistrations")
  reports         Report[]     @relation("EventReports")
  images          Image[]      @relation("EventImages")

  @@map("events")
}

model Image {
  id      Int     @id @default(autoincrement())
  value   String
  eventId Int?
  event   Event?  @relation("EventImages", fields: [eventId], references: [id])

  @@map("images")
}

enum StatusEvent {
  open_registration
  in_progress
  completed
  cancelled
}

model Activity {
  id             Int            @id @default(autoincrement())
  volunteerId    Int
  eventId        Int
  status         StatusActivity
  statusPayment  StatusPayment
  motivation     String         @db.Text
  additionalInfo String?        @db.Text
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  volunteer      User           @relation("UserRegistrations", fields: [volunteerId], references: [id])
  event          Event          @relation("EventRegistrations", fields: [eventId], references: [id])

  @@map("activities")
}

enum StatusPayment {
  pending
  approved
  cancelled
}

enum StatusActivity {
  pending
  approved
  rejected
  cancelled
  quotaFull
}

model Report {
  id          Int      @id @default(autoincrement())
  eventId     Int
  volunteerId Int
  feedback    String?  @db.Text
  createdAt   DateTime @default(now())

  event       Event    @relation("EventReports", fields: [eventId], references: [id])
  volunteer   User     @relation("UserReports", fields: [volunteerId], references: [id])

  @@map("reports")
}

model CategoryEvent {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  events      Event[]

  @@map("category_events")
}
